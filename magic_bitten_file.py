#!/usr/bin/env python3

import argparse
import sys

FILE_SIGNATURES = {
    "bz2": [0x42, 0x5A, 0x68],
    "gif": [0x47, 0x49, 0x46, 0x38, 0x37, 0x61],
    "gz": [0x1F, 0x8B],
    "jpg": [0xFF, 0xD8, 0xFF, 0xE0],
    "mp3": [0xFF, 0xFB],
    "pdf": [0x25, 0x50, 0x44, 0x46, 0x2D],
    "rar": [0x52, 0x61, 0x72, 0x21, 0x1A, 0x07, 0x01, 0x00],
    "tif": [0x49, 0x49, 0x2A, 0x00],
    "png": [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52],
    "zip": [0x50, 0x4B, 0x03, 0x04],
    "7z": [0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C],
    "exe": [0x4D, 0x5A],
    "bmp": [0x42, 0x4D],
    "wav": [0x52, 0x49, 0x46, 0x46],
    "avi": [0x52, 0x49, 0x46, 0x46],
    "flac": [0x66, 0x4C, 0x61, 0x43],
    "tar": [0x75, 0x73, 0x74, 0x61, 0x72],
    "doc": [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1],
    "docx": [0x50, 0x4B, 0x03, 0x04],
    "xlsx": [0x50, 0x4B, 0x03, 0x04],
    "pptx": [0x50, 0x4B, 0x03, 0x04],
    "epub": [0x50, 0x4B, 0x03, 0x04],
    "sqlite": [0x53, 0x51, 0x4C, 0x69, 0x74, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x20, 0x33, 0x00],
    "elf": [0x7F, 0x45, 0x4C, 0x46],
    "ps": [0x25, 0x21],
    "psd": [0x38, 0x42, 0x50, 0x53],
    "rtf": [0x7B, 0x5C, 0x72, 0x74, 0x66, 0x31],
    "xml": [0x3C, 0x3F, 0x78, 0x6D, 0x6C],
    "ogg": [0x4F, 0x67, 0x67, 0x53],
    "class": [0xCA, 0xFE, 0xBA, 0xBE],
    "swf": [0x46, 0x57, 0x53],
    "mid": [0x4D, 0x54, 0x68, 0x64],
    "ico": [0x00, 0x00, 0x01, 0x00],
    "midi": [0x4D, 0x54, 0x68, 0x64],
    "mov": [0x00, 0x00, 0x00, 0x14, 0x66, 0x74, 0x79, 0x70],
    "mp4": [0x00, 0x00, 0x00, 0x18, 0x66, 0x74, 0x79, 0x70],
    "wmv": [0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11],
    "mkv": [0x1A, 0x45, 0xDF, 0xA3],
    "webm": [0x1A, 0x45, 0xDF, 0xA3],
    "flv": [0x46, 0x4C, 0x56],
    "iso": [0x43, 0x44, 0x30, 0x30, 0x31],
    "dmg": [0x78, 0x01, 0x73, 0x0D, 0x62, 0x62, 0x60],
    "vmdk": [0x4B, 0x44, 0x4D, 0x56],
    "vhd": [0x63, 0x6F, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x78],
    "img": [0xEB, 0x3C, 0x90],
    "cab": [0x4D, 0x53, 0x43, 0x46],
    "deb": [0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E],
    "rpm": [0xED, 0xAB, 0xEE, 0xDB],
    "arj": [0x60, 0xEA],
    "lzh": [0x2D, 0x6C, 0x68],
    "ace": [0x2A, 0x2A, 0x41, 0x43, 0x45, 0x2A, 0x2A],
    "z": [0x1F, 0x9D],
    "xz": [0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00],
    "cab": [0x4D, 0x53, 0x43, 0x46],
    "msi": [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1],
    "bat": [0x40, 0x45, 0x4C, 0x46],
    "dll": [0x4D, 0x5A],
    "sys": [0x4D, 0x5A],
    "com": [0xC9],
    "scr": [0x4D, 0x5A],
    "torrent": [0x64, 0x38, 0x3A, 0x61, 0x6E, 0x6E, 0x6F, 0x75, 0x6E, 0x63, 0x65],
}

def list_signatures():
    """Print all available file type signatures."""
    print('\n'.join(FILE_SIGNATURES))

def prepend_magic_bytes(filename, filetype):
    """Prepend magic bytes to the file if not already present."""
    try:
        with open(filename, 'rb+') as file:
            # Read only the necessary bytes for signature check
            signature = file.read(len(FILE_SIGNATURES[filetype]))
            if signature == bytes(FILE_SIGNATURES[filetype]):
                sys.exit(f"File {filename} is already of type {filetype}")

            # Reset to start, write signature, then append original content
            file.seek(0)
            content = file.read()  # Read remaining content
            file.seek(0)
            file.write(bytes(FILE_SIGNATURES[filetype]) + content)
    except FileNotFoundError:
        sys.exit(f"File {filename} not found")
    except PermissionError:
        sys.exit(f"Permission denied accessing {filename}")
    except OSError as error:
        sys.exit(f"Error processing {filename}: {error}")

def main():
    """Handle command-line arguments and execute operations."""
    parser = argparse.ArgumentParser(description="Modify file magic bytes")
    parser.add_argument('-f', '--filetype', choices=FILE_SIGNATURES.keys(),
                        help="File type for magic bytes")
    parser.add_argument('-l', '--list', action='store_true',
                        help="List all file signatures")
    parser.add_argument('filename', type=str, nargs='?', help="Target file")
    args = parser.parse_args()

    if args.list:
        list_signatures()
    elif args.filetype and args.filename:
        prepend_magic_bytes(args.filename, args.filetype)
    else:
        if not args.filetype and args.filename:
            sys.exit("Error: --filetype is required when specifying a filename")
        parser.print_help(sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main()
